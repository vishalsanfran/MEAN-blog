var mongoose = require('mongoose'),
    crypto = require('crypto'),
    Schema = mongoose.Schema;

//Defines userSchema object using the Schema constructor
var UserSchema = new Schema({
  firstName: String,
  lastName: String,
  email: {
    type: String,
    //index: true,   //create secondary index
    match: /.+\@.+\..+/
  },
  username: {
    type: String,
    trim: true,    // take care of whitespaces
    unique: true,  //create unique index
    required: 'username is required'
  },
  password: {
    type: String,
    validate: [
      function(password) {
        return password && password.length > 6;
      },
      'Password should be longer'
    ]
  },
  salt: { //used to hash the password
    type: String
  },
  provider: {   //indicates strategy used to register the user
    type: String,
    required: 'Provider is required'
  },
  providerId: String, // indicates user identifier for auth strategy
  providerData: {}, //store the user object retrieved from OAuth providers

  // add http:// prefix is not present in the url
  website: {
    type: String,
    get: function(url) {
      if (!url) {
        return url;
      } else {
        if (url.indexOf('http://') !== 0   &&
          url.indexOf('https://') !== 0) {
          url = 'http://' + url;
        }

        return url;
        }
    }
  },
  created: {
    type: Date,
    default: Date.now
  }
});

//add virtual attr to modify document representation without
// mongo persistence overhead
UserSchema.virtual('fullName').get(function() {
  return this.firstName + ' ' + this.lastName;
}).set(function(fullName) {
  var splitName = fullName.split(' '); 
  this.firstName = splitName[0] || ''; 
  this.lastName = splitName[1] || ''; 
});

//middleware to handle the hashing of your users' passwords
UserSchema.pre('save', function(next) {
  if (this.password) {
    //creates an autogenerated pseudo-random hashing salt
    this.salt = new Buffer(crypto.randomBytes(16).toString('base64'), 'base64');
    //replaces the current user password with a hashed password
    this.password = this.hashPassword(this.password);
  }

  next();
});

//used to hash a password string by utilizing Node.js' crypto module
UserSchema.methods.hashPassword = function(password) {
  return crypto.pbkdf2Sync(password, this.salt, 10000, 64).toString('base64');
};

// accepts a string argument, hashes it, and compares it to the current user's hashed password
UserSchema.methods.authenticate = function(password) {
  return this.password === this.hashPassword(password);
};

UserSchema.statics.findUniqueUsername = function(username, suffix, callback) {
  var _this = this;
  var possibleUsername = username + (suffix || '');

  _this.findOne({
    username: possibleUsername
  }, function(err, user) {
    if (!err) {
      if (!user) {
        callback(possibleUsername);
      } else {
        return _this.findUniqueUsername(username, (suffix || 0) + 1, callback);
      }
    } else {
      callback(null);
    }
  });
};

//force Mongoose to include getters when converting MongoDB 
// document to a JSON representation
UserSchema.set('toJSON', { getters: true, virtuals: true });

// post middleware
UserSchema.post('save', function(next) {
  if(this.isNew) {
    console.log('A new user was created.');
  } else {
    console.log('A user updated is details.');
  }
});

//Define the user model
mongoose.model('User', UserSchema);